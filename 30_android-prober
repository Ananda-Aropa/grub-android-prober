#!/bin/bash
set -e

# grub-mkconfig helper script.
# Copyright (C) 2006,2007,2008,2009  Free Software Foundation, Inc.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

. "$pkgdatadir/grub-mkconfig_lib"
. /etc/default/grub

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

CLASS="--class android --class os"
OS="Android"

sub_indent() { echo -e "$submenu_indentation$*"; }

android_entry() {
	local \
		menuentry_id=$1 \
		kernel=$2 \
		initrd=$3

	sub_indent "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option '$menuentry_id' {"

	save_default_entry | grub_add_tab

	# Use ELILO's generic "efifb" when it's known to be available.
	# FIXME: We need an interface to select vesafb in case efifb can't be used.
	if [ ! "$GRUB_GFXPAYLOAD_LINUX" ]; then
		sub_indent "	load_video"
		grep -qx "CONFIG_FB_EFI=y" "${config}" 2>/dev/null &&
			grep -qx "CONFIG_VT_HW_CONSOLE_BINDING=y" "${config}" 2>/dev/null &&
			sub_indent "	set gfxpayload=keep"

	else
		[ "$GRUB_GFXPAYLOAD_LINUX" = text ] ||
			sub_indent "	load_video"
		sub_indent "	set gfxpayload=$GRUB_GFXPAYLOAD_LINUX"
	fi

	sub_indent "	insmod gzio"
	echo -e "$disk" | sed "s/^/$submenu_indentation	/gm"
	sub_indent "	linux $kernel $cmdline"
	sub_indent "	initrd ${ucode_list# } $initrd"

	sub_indent "}\n"
}

gen_entry() {
	local entry_string=$1 \
		device \
		src \
		os \
		kernel_type \
		bootfile \
		ucodes \
		system \
		data \
		cmdline

	shift

	i=1
	while read -rd $'\0' arg; do
		case $i in
		1) device=$arg ;;
		2) src=$arg ;;
		3) os=$arg ;;
		4) kernel_type=$arg ;;
		5) bootfile=$arg ;;
		6) ucodes=$arg ;;
		7) system=$arg ;;
		8) data=$arg ;;
		9) cmdline=${arg:-$GRUB_CMDLINE_ANDROID} ;;
		*) break ;;
		esac
		i=$((i + 1))
	done < <(sed 's/\xFF0/\xFF\x00/g; s/\xFF\(.\)/\1/g' <<<"$entry_string")

	ucode_list=""
	ucode=""
	disk="$(prepare_grub_to_access_device "$device")"
	boot_device_id="$(grub_get_device_id "$device")"

	unset IFS

	echo "Found $os on $device" >&2

	local type=default \
		MAIN_ENTRY \
		EXTENDED_ENTRIES

	# Extra indentation to add to menu entries in a submenu. We're not in a submenu
	# yet, so it's empty. In a submenu it will be equal to '\t' (one tab).
	submenu_indentation=""

	title=$os

	entry() {
		android_entry \
			"${OS}-${src##*/}-${1##*/}-${2##*/}-${type}-${boot_device_id}" \
			"${src}/${1}" \
			"${src}/${2}"
	}

	parse_to_entry() {
		if [ "$type" = "default" ]; then
			MAIN_ENTRY=$(entry "$@")
			type=extended
			submenu_indentation=$grub_tab
		fi

		EXTENDED_ENTRIES="$EXTENDED_ENTRIES\n$(entry "$@")"
	}

	local ucode

	if [ "$src" ]; then
		cmdline="$cmdline SRC=$src"
	fi

	IFS=","

	for ucode in $ucodes; do
		ucode_list="$ucode_list $src/$ucode"
	done

	case "$kernel_type" in
	ab | fstab)
		ROOT_DEVICE=$device

		case "$kernel_type" in
		fstab)
			if [ "$GRUB_DISABLE_LINUX_UUID" != "true" ]; then
				ROOT_UUID=$(${grub_probe} --device "$device" --target=fs_uuid 2>/dev/null)
				[ "$ROOT_UUID" ] && ROOT_DEVICE="UUID=$ROOT_UUID"
			fi
			if [ "$type" = "default" ] && [ "$bootfile" ]; then
				case "$bootfile" in
				*.env.cfg)
					disk="$disk\nsource $src/boot/$bootfile"
					cmdline="$cmdline \$cmdline androidboot.bootctrl_bootcfg=/boot/$bootfile"
					;;
				*) ;;
				esac
			fi
			;;
		*) ;;
		esac

		cmdline="$cmdline ROOT=$ROOT_DEVICE"

		if [ "$kernel_type" = fstab ] && [ "$system" = traditional ]; then
			parse_to_entry "kernel" "initrd.img"
		elif [ "$kernel_type" = fstab ] && [[ "$system" = _* ]]; then
			parse_to_entry "kernel${system}" "initrd${system}.img"
			# Handle recovery mode
			title="$os - Recovery Mode"
			cmdline="$cmdline androidboot.mode=recovery androidboot.force_normal_boot=0"
			parse_to_entry "kernel${system}" "initrd${system}.img"
		else
			local slot _cmdline=$cmdline
			for slot in a b; do
				[ "$type" = "default" ] || title="$os - Slot ${slot^}"
				cmdline="$cmdline androidboot.slot_suffix=_$slot"
				parse_to_entry "kernel_$slot" "initrd_$slot.img"
				cmdline=$_cmdline
			done
		fi
		;;
	*)

		if [ "$system" ]; then
			cmdline="$cmdline SYSTEM=$system"
		fi

		cmdline="$cmdline ROOT=$device"

		if [ "$data" ]; then
			cmdline="$cmdline DATA=$data"
		fi

		local \
			kernels=$kernel_type initrds=$bootfile \
			kernel initrd
		for kernel in $kernels; do
			for initrd in $initrds; do
				[ "$type" = "default" ] || title="$title, with ${kernel##*/}, and ${initrd##*/}"
				parse_to_entry "$kernel" "$initrd"
			done
		done
		;;
	esac

	unset IFS

	cat <<EOF

$(echo -e "$MAIN_ENTRY")

submenu '$(echo "Advanced options for $os" | grub_quote)' --class submenu ${CLASS} \$menuentry_id_option '${OS}-${src##*/}-${type}-${boot_device_id}' { 
$(echo -e "$EXTENDED_ENTRIES")
}

EOF
}

while read -r detect_entry; do
	gen_entry "$detect_entry"
done < <(grub-android-prober)
