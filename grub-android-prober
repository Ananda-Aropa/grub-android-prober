#!/bin/bash

[ "$EUID" = 0 ] || { echo "ERROR: Please run as root" && exit 1; }

. "/usr/share/grub/grub-mkconfig_lib"

# Android x86 supported file systems
# Note that by default, mostly Android initrds don't support btrfs and some other
# filesystems
# For higher versions, btrfs and some other filesystems are supported
: "${GRUB_ANDROID_SUPPORTED_FS:="ext2 ext3 ext4 vfat exfat btrfs"}"

# Excluded paths
# Start with a slash, separated by ',', ending slashes are not needed
: "${GRUB_ANDROID_EXCLUDE_SEARCH:="/bin,/boot/efi,/efi,/EFI,/dev,/etc,/lib,/lib64,/lib32,/proc,/run,/sbin,/srv,/sys,/usr,/var,/tmp,/Program Files,/Program Files (x86),/ProgramData,/Windows,/Users,/Volumes,/System,/Library,/cores,/@,/@home,/@root,/@srv,/@cache,/@tmp,/@log"}"

# Search image names
: "${GRUB_ANDROID_INCLUDE_SEARCH:="system_a.efs system_a.sfs system_a.img system_a system.efs system.sfs system.img system"}"

# Search recursiveness depth
: "${GRUB_ANDROID_SEARCH_DEPTH:=3}"

# Default parameters
: "${GRUB_CMDLINE_ANDROID:=""}"

. /etc/default/grub
. /etc/grub-android.conf 2>/dev/null || :

mapdevfs() { readlink -f "$1"; }
blkid_section() { blkid "$2" | grep -ioE "$1=\"[a-z0-9-]+\"" | awk -F'"' '{print $2}'; }
grep_string() { grep "$2" <<<"${1}"; }
grep_prop() { grep_string "${1}" "ro.$2=" | awk -F"=" '{print $2}'; }
get_version_prop() { grep_prop "${1}" "$2.version${3:+.$3}" | head -1z; }

on_sataraid() {
	type dmraid >/dev/null 2>&1 || return 1
	local parent="${1%/*}"
	local device="/dev/${parent##*/}"
	if dmraid -r -c | grep -q "$device"; then
		return 0
	fi
	return 1
}

parse_proc_mdstat() {
	if type udevadm >/dev/null 2>&1; then
		udevinfo() {
			udevadm info "$@"
		}
	fi
	while read -r line; do
		for word in $line; do
			dev="${word%%\[*}"
			# TODO: factor this out to something in di-utils if
			# it's needed elsewhere
			if [ -d /sys/block ] && type udevinfo >/dev/null 2>&1; then
				if ! udevinfo -q path -n "/dev/$dev" 2>/dev/null |
					grep -q '/.*/.*/'; then
					continue
				fi
			elif ! echo "$dev" | grep -q "/part"; then
				continue
			fi
			raidpart="/dev/$dev"
			mapdevfs "$raidpart"
		done
	done
}

parse_proc_swaps() {
	while read -r line; do
		set -f
		set -- $line
		set +f
		echo "$(mapdevfs $1) swap"
	done
}

partitions() {
	# Exclude partitions that have whole_disk sysfs attribute set.
	if [ -d /sys/block ]; then
		# Exclude partitions on physical disks that are part of a
		# Serial ATA RAID disk.
		for part in /sys/block/*/*[0-9]; do
			if [ -f "$part/start" ] &&
				[ ! -f "$part/whole_disk" ] && ! on_sataraid $part; then
				name="$(echo "${part##*/}" | sed 's,[!.],/,g')"
				if [ -e "/dev/$name" ]; then
					echo "/dev/$name"
				fi
			fi
		done

		# Add Serial ATA RAID devices
		if type dmraid >/dev/null 2>&1 &&
			dmraid -s -c >/dev/null 2>&1; then
			for raidset in $(dmraid -sa -c); do
				for part in /dev/mapper/"$raidset"*[0-9]; do
					echo "$part"
				done
			done
		fi
	elif [ "$(uname -s)" = Linux ]; then
		echo "Cannot find list of partitions!  (Try mounting /sys.)" >&2
		exit 1
	else
		# We don't know how to probe OSes on non-Linux kernels.  For
		# now, just don't get in the way.
		exit 0
	fi

	# Also detect OSes on LVM volumes (assumes LVM is active)
	if type lvs >/dev/null 2>&1; then
		env LVM_SUPPRESS_FD_WARNINGS=1 lvs --noheadings --separator : -o vg_name,lv_name 2>&1 |
			sed "s|-|--|g;s|^[[:space:]]*\(.*\):\(.*\)$|/dev/mapper/\1-\2|" |
			grep -v "No volume groups found"
	fi
}

check_valid() {
	[ "$1" ] || return 1
	local path \
		path_sysimg=$1 \
		device=$2 \
		buildprop \
		abi \
		buildver \
		os \
		vendor \
		src

	path=$(dirname "$1")

	shift 2

	# Getting build.prop contents
	buildprop="$(find_buildprop "$path_sysimg")" || return 1

	# Get abi
	abi=$(grep_prop "$buildprop" "product.cpu.abi")
	case "$abi" in *64*) [ "$LM" ] || return 1 ;; esac
	case "$abi" in
	x86*) : x86 ;;
	arm*) : arm ;;
	*) : ;;
	esac
	[ "$_" = "$GENKERNEL_ARCH" ] || return 1

	# Parse version
	buildver="$(grep -E "ro.([a-z]*).version" <<<"$(grep -v build <<<"${buildprop}")")"
	for version in $buildver; do
		case $version in
		ro.bliss.version*) os="Bliss OS $(get_version_prop "$buildver" "bliss")" && break ;;
		ro.phoenix.version*) os="Phoenix OS $(get_version_prop "$buildver" "phoenix" "code")" && break ;;
		ro.primeos.version*) os="Prime OS $(get_version_prop "$buildver" "primeos" "name")" && break ;;
		ro.lineage.version*) os="Lineage OS $(get_version_prop "$buildver" "lineage")" ;;
		*) os=$(echo -n "AOSP" $(get_version_prop "$buildver" "build" "release") $(grep_prop "$buildprop" "build.flavor")) ;;
		esac
	done

	src=$(make_system_path_relative_to_its_root "$path")

	# Checking for cpu id/manufacturer and microcode file
	case "$(grep vendor_id /proc/cpuinfo | head -1 | awk '{print $3}')" in
	"GenuineIntel") : "intel" ;;
	"AuthenticAMD") : "amd" ;;
	esac
	vendor=$_

	local kernel_type bootfile ucodes system data cmdline

	local kernels kernel initrd

	data=$(ls -d "$path"/data* || head -1)
	data=$(basename "$data")

	do_ucode() {
		local u
		for u in "$1"/${vendor}-{u,micro}code.img; do
			[ -f "$u" ] && ucodes="$ucodes,$(basename "$u")"
		done
	}

	if [ -e "$path"/cmdline.txt ]; then
		cmdline=$(cat "$path"/cmdline.txt)
	fi

	# shellcheck disable=SC2144
	if [ -e "$path"/fstab.android ]; then
		kernel_type=fstab
		data=

		if [ -e "$path"/kernel ]; then
			system=traditional
		fi

		local _bootfile
		if [ -d "$path"/boot/grub ] || [ -f "$path"/refind_linux.conf ]; then
			# do not handle installations with custom bootloaders
			return 1
		elif [ -f "${_bootfile:=$(find "$path"/boot -maxdepth 1 -mindepth 1 -type f -iname '*.env.cfg')}" ]; then
			bootfile=$(basename "$_bootfile")
			local _cmdline=$cmdline
			source "$_bootfile"
			set -- $cmdline
			local arg
			for arg in "$@"; do
				case "$arg" in
				androidboot.slot_suffix=*) system=${arg##*=} ;;
				*) ;;
				esac
			done
			cmdline=$_cmdline
		fi

		do_ucode "$path"
	elif [ -e "$path"/kernel_a ]; then
		kernel_type=ab

		do_ucode "$path"
	else
		for kernel in "$path"/vmlinu[xz]* "$path"/kernel*; do
			grub_file_is_not_garbage "$kernel" &&
				kernels="$(basename "$kernel"),$kernel_type"
		done
		kernel_type=$kernels

		for initrd in "$path"/initrd*.img "$path"/initramfs*.img; do
			grub_file_is_not_garbage "$initrd" &&
				bootfile="$(basename "$initrd"),$bootfile"
		done

		system=$(basename "$path_sysimg")

		do_ucode "$path"
	fi

	printf '%s\0%s\0%s\0%s\0%s\0%s\0%s\0%s\0%s\0\n' \
		"${device}" \
		"${src}" \
		"${os}" \
		"${kernel_type%,}" \
		"${bootfile%,}" \
		"${ucodes#,}" \
		"${system}" \
		"${data}" \
		"${cmdline}"
}

find_os() {
	local mountpoint=$1 device=$2 foundpaths EXCLUDE=""

	IFS=,
	for dir in ${GRUB_ANDROID_EXCLUDE_SEARCH}; do
		EXCLUDE="$EXCLUDE -not \( -path \"${mountpoint}${dir/ /\\ }/*\" -prune \)"
	done
	unset IFS

	foundpaths="$(eval 'timeout 30 find "'"$mountpoint"'" -maxdepth '"$DEPTH"' \(' "$INCLUDE" '\)' "$EXCLUDE")" || return 1

	while read -r path; do
		check_valid "$path" "$device" || continue
	done <<<"$foundpaths"
}

find_buildprop() {
	if [ -d "$1" ]; then
		local buildprop_file=$1/system/build.prop
		[ -f "$buildprop_file" ] || buildprop_file=$1/build.prop
		[ -f "$buildprop_file" ] || return 1
		cat "$buildprop_file"
	elif [ -f "$1" ]; then
		local loop_dir base_name
		base_name=$(basename "$1")
		case "$base_name" in
		system*.???)
			loop_dir="$(tmpmount "$1" loop)" || return 1
			case "$base_name" in
			system*.img) find_buildprop "$loop_dir" ;;
			system*.?fs) find_buildprop "$loop_dir/system.img" ;;
			esac
			find_buildprop "$loop_dir"
			umount -lf "$loop_dir"
			rm -rf "$loop_dir"
			;;
		*) ;;
		esac
	fi
	return $?
}

tmpmount() {
	local disktmp opts=${2:+,$2} fs=${3:-auto}
	disktmp="$(mktemp)"
	rm -f "$disktmp"
	mkdir -p "$disktmp" || :
	# if ! { type grub-mount && grub-mount "$1" "$disktmp"; } >/dev/null 2>&1; then
	[ "$(blkid_section TYPE "$1")" = "ntfs" ] && fs=$NTFS

	local roflag mounted
	for roflag in "ro" "ro,force"; do
		# try with no `force` flag first
		if mount -o $roflag$opts -t "$fs" "$1" "$disktmp" >/dev/null 2>&1; then
			mounted=1
			break
		fi
	done
	# fi
	if [ "$mounted" ]; then
		echo "$disktmp"
	else
		return 1
	fi
}

mount_find() {
	# check if mountable, else search from highest top level

	local partition_mp existing_mp filesystem

	filesystem=$(blkid_section TYPE "$1")
	[ "$filesystem" ] && grep_string "$GRUB_ANDROID_SUPPORTED_FS" "$filesystem" >/dev/null || return

	partition_mp=$(tmpmount "$1")
	if [ "$partition_mp" ]; then
		existing_mp=$partition_mp
	else
		existing_mp="$(grep "$1" /proc/mounts | head -1 | awk '{print $2}')" || return 1
	fi

	find_os "$existing_mp" "$1"

	if [ "$partition_mp" ]; then
		umount -lf "$partition_mp"
		rm -rf "$partition_mp"
	fi
}

DEPTH=$GRUB_ANDROID_SEARCH_DEPTH

delim=
for file in ${GRUB_ANDROID_INCLUDE_SEARCH}; do
	INCLUDE="$INCLUDE $delim -name \"$file\""
	delim="-o"
done

# check cpu architecure
machine=$(uname -m)
case "$machine" in
i?86 | x86_*) : x86 ;;
arm* | aarch*) : arm ;;
risc*) : riscv ;;
*)
	echo "ERROR: Unsupported processor architecture!" >&2
	exit 1
	;;
esac
GENKERNEL_ARCH=$_

# check if cpu is 64 bit capable
LM=
grep -oqw 'lm' /proc/cpuinfo && LM=1

# check if kernel supports ntfs3
if modinfo ntfs3 >/dev/null 2>&1; then
	NTFS=ntfs3
else
	NTFS=ntfs-3g
fi

mkdir -p /tmp/aprob
: >"/tmp/aprob/swaps-map"
if [ -f /proc/swaps ]; then
	grep "^/dev/" /proc/swaps | parse_proc_swaps >"/tmp/aprob/swaps-map" || :
fi
: >"/tmp/aprob/raided-map"
if [ -f /proc/mdstat ]; then
	grep "^md" /proc/mdstat | parse_proc_mdstat >"/tmp/aprob/raided-map" || :
fi

for partition in $(partitions); do
	if ! mapped="$(mapdevfs "$partition")"; then
		continue
	fi

	# Skip partitions used in software RAID arrays
	if grep -q "^$mapped" "/tmp/aprob//raided-map"; then
		continue
	fi

	# Skip partitions used as active swap
	if grep -q "^$mapped " "/tmp/aprob//swaps-map"; then
		continue
	fi

	mount_find "$partition"
done |
	sed 's/\xFF/\xFF\xFF/g; s/\x00/\xFF0/g'
